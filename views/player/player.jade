extends ../layout

block content

  include ../styles/styles-global.jade
  include styles-player.jade

  main
    section.video-container
      video#player(playsinline controls='' autoplay='true' name='media' preload="auto")
        // file extension includes the .
        source(src=`${filePathWithoutExtension}${processingData.fileExtension}`)
        // TODO: replace with loop (has to fix on the backend)
        if languagesToLoop.length > 0
          each loopLanguage in languagesToLoop
            track(kind='captions' label=loopLanguage.name srclang=loopLanguage.languageCode src=`${filePathWithoutExtension}_${loopLanguage.name}.vtt` default='')
          track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}_${processingData.language}.vtt` default=true)
        else
          track(kind='captions' label=processingData.language srclang=processingData.languageCode src=`${filePathWithoutExtension}.vtt` default=true)
    section.bottomSection
      .buttons
        button.btn#increaseSize Subtitle Text Size +
        button.btn#decreaseSize Subtitle Text Size -
        button.btn#increaseLineHeight Subtitle Spacing +
        button.btn#decreaseLineHeight Subtitle Spacing -
        button.btn#lightBg Lighter Background -
        button.btn#darkBg Darker Background +
        button.btn#showHideControls Hide Text
      .downloadLinks
        a.btn.startAnotherTranscription(href='/') Start Another Transcription

        // ORIGINAL LANGUAGE FILES
        if processingData.translatedLanguages.length > 1
          span Original Language:
        .srtLinks.links
          span SRT (#{processingData.language})
          a(download href=`${filePathWithoutExtension}.srt`) Download
        .vttLinks.links
          span VTT (#{processingData.language})
          a(href=`${filePathWithoutExtension}.vtt`) View
          a(download href=`${filePathWithoutExtension}.vtt`) Download
        .txtLinks.links
          span TXT (#{processingData.language})
          a(href=`${filePathWithoutExtension}.txt`) View
          a(download href=`${filePathWithoutExtension}.txt`) Download

        // TRANSLATED FILES //
        if processingData.translatedLanguages.length > 0
          p#translationsHeader Translations:
        // translated VTT files
        each language in processingData.translatedLanguages
          .links
            span VTT (#{language})
            a(href=`${filePathWithoutExtension}_${language}.vtt`) View
            a(href=`${filePathWithoutExtension}_${language}.vtt` download) Download
        .links
          a(download href=`${filePathWithoutExtension}${processingData.fileExtension}`) Download File
      .fileDetails
        each property, value in processingData
          p #{value}: #{property}
      #addTranslation
        a(href=`/player/` + renderedFilename + `/add` style="text-decoration:none;")
          p(style="color:rgb(22, 29, 29);") Add Here
            //p Filename: #{processingData.filename}

  script(src = 'https://cdn.plyr.io/3.7.2/plyr.js')
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/plyr/3.7.2/plyr.css' integrity='sha512-SwLjzOmI94KeCvAn5c4U6gS/Sb8UC7lrm40Wf+B0MQxEuGyDqheQHKdBmT4U+r+LkdfAiNH4QHrHtdir3pYBaw==' crossorigin='anonymous' referrerpolicy='no-referrer')
  script.
    l = console.log;

    let player;

    const language = '#{processingData.language}';
    const languagesToLoop = !{JSON.stringify(languagesToLoop)};
    const allLanguages = !{JSON.stringify(allLanguages)};

    l('all languages');
    l(allLanguages);

    function findIndexNumber(language, text) {
      const video = $('video')[0]
      const textTracks = video.textTracks;

      let foundIndex;
      let index = 0;
      for (const track of textTracks) {
        const trackLanguage = track.label
        if (language === trackLanguage) {
          for (const cue of track.cues) {
            if (cue.text === text) {
              foundIndex = index
            }
            index++
          }
        }
      }

      return foundIndex
    }

    function loadTextTracks(){
      const video = $('video')[0]
      const textTracks = video.textTracks;
      for (const track of textTracks) {
        track.mode = 'hidden';
      }
    }
    loadTextTracks()

    function findTextFromIndexNumber(language, index) {
      const video = $('video')[0]
      const textTracks = video.textTracks;

      let text;
      l('text tracks');
      l(textTracks);

      for (const track of textTracks) {
        const trackLanguage = track.label
        if (language === trackLanguage) {
          text = track.cues[index]?.text
          return text
        }
      }
      return false;
    }

    function getCurrentLanguageAndTrack() {
      const video = $('video')[0]
      const textTracks = video.textTracks;
      const trackNumber = player.currentTrack;
      const currentTrack = textTracks[trackNumber]

      const language = currentTrack.label;
      const text = currentTrack.activeCues?.[0]?.text;

      const indexNumber = findIndexNumber(language, text);

      return {
        language,
        text,
        indexNumber
      }
    }

    function getSecondCaptionsDefaults(){
      let secendCaptionsDefaults = localStorage.getItem('secondCaptionsDefaults')
      if(!secendCaptionsDefaults){
        localStorage.setItem('secondCaptionsDefaults', JSON.stringify({}))
        return {}
      } else {
        secendCaptionsDefaults = JSON.parse(secendCaptionsDefaults)
        return secendCaptionsDefaults
      }
    }

    function setSecondCaptionsDefaults(secondCaptionsLanguage){
      const secondCaptionsDefaults = getSecondCaptionsDefaults()
      secondCaptionsDefaults[language] = secondCaptionsLanguage;
      localStorage.setItem('secondCaptionsDefaults', JSON.stringify(secondCaptionsDefaults))
    }

    function buildMenuItemString(language, index){
      return `<button data-plyr="language" id="languageName" type="button" role="menuitemradio" class="plyr__control" aria-checked="false" value="${index}">
              <span id="languageValue" value="${language.name}">${language.name}<span class="plyr__menu__value"><span class="plyr__badge">${language.languageCode.toUpperCase()}</span></span></span>
          </button>`;
    }

    const disabledMenuItem = `
         <button data-plyr="language" type="button" role="menuitemradio" class="plyr__control" aria-checked="true" value="-1">
            <span>Disabled</span>
        </button>`;

    function createSecondCaptionsSetting() {
      const menuText = `${disabledMenuItem}
                ${allLanguages.map((language, index) => {
        return buildMenuItemString(language, index)
      }).join('')}`;

      // show second caption option in popup
      $('.plyr__menu__container > div > div > div > button')[1].removeAttribute('hidden')

      // write Second Captions name with Disabled as default on popup
      $('.plyr__menu__container > div > div > div > button').eq(1).html('<span>Second Captions<span class="plyr__menu__value">Disabled</span></span>');

      // add menu items for when you click the button
      $("div[id*='secondCaptions'] div").html(menuText)

      // set default chosen value as Disabled
      $("div[id*='secondCaptions'] button span").eq(0).text('Disabled')

      // handle when language value is clicked
      $("div[id*='secondCaptions'] div button").click(function () {
        // mark all languages as not checked
        $("div[id*='secondCaptions'] div button").attr("aria-checked", "false");

        // get language of clicked value
        let languageValue = $(this).children().text();

        // remove last two characters from string (couldn't get only French instead of FrenchFR)
        if (/[A-Z]{2}$/.test(languageValue)) {
          languageValue = languageValue.slice(0, -2);
        }

        setSecondCaptionsDefaults(languageValue)

        // get current vtt text
        const currentLang = getCurrentLanguageAndTrack();

        const translationText = findTextFromIndexNumber(languageValue, currentLang.indexNumber);

        const originalText = $("span.plyr__caption").text();

        // mark language as activated
        $(this).attr("aria-checked", "true");

        // update text at the top of the menu options
        $("div[id*='secondCaptions'] button span").eq(0).text(languageValue)

        // immediately add text if they didn't select Disabled
        if (languageValue !== 'Disabled') {
          $("span.plyr__caption").text(`${originalText}\n${translationText}`);
        }

        // update text on secondCaptions option
        $('.plyr__menu__container > div > div > div > button').eq(1)
                .find('span.plyr__menu__value')
                .text(languageValue)

        // click back button (mirrors plyr functionality)
        $("div[id*='secondCaptions'] button span").eq(0).click()
      })
    }

    let subtitlesFontSize, subtitlesLineHeight;

    $(document).ready(function () {

      let bottomTextShown = true;
      $('#showHideControls').click(function(){

        if(bottomTextShown){
          $('.downloadLinks').hide()
          $('.fileDetails').hide()
          $('#addSubtitles').hide()
          bottomTextShown = false;
          $(this).text('Show Text');

        } else {
          $('.downloadLinks').show()
          $('.fileDetails').show()
          $('#addSubtitles').show()
          bottomTextShown = true;
          $(this).text('Hide Text');
        }
        l('clicked!');
      })

      // make all links open in new tab
      const anchorTags = document.querySelectorAll('a');
      anchorTags.forEach((anchor) => {
        anchor.setAttribute('target', '_blank');
      });

      function adjustFontSize(direction) {

        const currentLineHeight = $('.plyr__caption').css('line-height');
        const currentLineHeight1 = currentLineHeight.replace('px', '');
        const newLineHeight = parseInt(currentLineHeight1) + (direction === 'increase' ? 2 : -2);

        const currentFontSize = $('.plyr__caption').css('font-size');
        const currentFontSize1 = currentFontSize.replace('px', '');
        const newFontSize = parseInt(currentFontSize1) + (direction === 'increase' ? 2 : -2);


        subtitlesFontSize = newFontSize;
        subtitlesLineHeight = newLineHeight;

        localStorage.setItem("subtitlesFontSize", subtitlesFontSize);

        l('subtitlesFontSize', subtitlesFontSize)
        l('subtitlesLineHeight', subtitlesLineHeight)


        // $('.plyr__caption').attr('style', `font-size: ${newFontSize}px !important`);
        $('.plyr__caption').css('line-height', `${newLineHeight}px`);
        $('.plyr__caption').css('font-size', `${newFontSize}px`);
      }

      function adjustCaptionsBackground(direction) {
        let bgColors, bgAlpha;
        const currentBgOpacity = $('.plyr__caption').css('background');
        bgColors = currentBgOpacity.split(',');
        bgAlpha = bgColors[3] ? bgColors[3].split(')')[0] : bgColors[3] = 1;

        const newBgOpacity = parseFloat(bgAlpha) + (direction === 'increase' ? 0.15 : - 0.15);

        // Saving the new background opacity into localStorage.
        localStorage.setItem("bgOpacity", newBgOpacity);

        $('.plyr__caption').css("background", `rgba(0, 0, 0, ${newBgOpacity}`);
      }
      function adjustLineHeight(direction) {
        const currentLineHeight = $('.plyr__caption').css('line-height');
        const currentLineHeight1 = currentLineHeight.replace('px', '');
        const newLineHeight = parseInt(currentLineHeight1) + (direction === 'increase' ? 2 : -2);


        subtitlesLineHeight = newLineHeight;

        localStorage.setItem("subtitlesLineHeight", subtitlesLineHeight);

        l('subtitlesLineHeight', subtitlesLineHeight)

        // $('.plyr__caption').attr('style', `font-size: ${newFontSize}px !important`);
        $('.plyr__caption').css('line-height', `${newLineHeight}px`);
      }

      $('#increaseSize').click(function (event) {
        adjustFontSize('increase');
      });

      $('#decreaseSize').click(function (event) {
        adjustFontSize('decrease');
      });

      $('#increaseLineHeight').click(function (event) {
        adjustLineHeight('increase');
      });

      $('#decreaseLineHeight').click(function (event) {
        adjustLineHeight('decrease');
      });

      $('#lightBg').click(function (event) {
        adjustCaptionsBackground('decrease');
      });

      $('#darkBg').click(function (event) {
        adjustCaptionsBackground('increase');
      });

      console.log("ready!");
      var controls =
              [
                'progress', // The progress bar and scrubber for playback and buffering
                'play-large', // The large play button in the center
                // 'restart', // Restart playback
                // 'rewind', // Rewind by the seek time (default 10 seconds)
                'play', // Play/pause playback
                // 'fast-forward', // Fast forward by the seek time (default 10 seconds)
                'volume', // Volume control
                'volume-slider',
                'current-time', // The current time of playback
                'duration', // The full duration of the media
                'mute', // Toggle mute
                'captions', // Toggle captions
                'settings', // Settings menu
                // 'pip', // Picture-in-picture (currently Safari only)
                // 'airplay', // Airplay (currently Safari only)
                // 'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
                'fullscreen'
              ];

      player = new Plyr('#player', {
        disableContextMenu: true,
        controls,
        captions: { active: true, language: 'auto', update: true },
        settings: ['captions', 'secondCaptions']
      });

      player.on('ready', event => {
        $('.plyr__volume').append($('.plyr__volume').children('').get().reverse());
      });

      l('captions');

      // probably better to do on plyr ready if available as event
      setTimeout(function(){

        if (allLanguages.length > 1) {
          createSecondCaptionsSetting();
        }

        $(function () {
          $('.plyr__captions').draggable({
            containment: 'plyr',
            // drag: function (event, ui) {
            // }
          });
        });


        const captionsIsPressed = $('button[data-plyr="captions"]')?.hasClass('plyr__control--pressed')

        if (!captionsIsPressed) {
          $('button[data-plyr="captions"]').click();
        }

        let haveSetupSecondCaptions = false;
        // set secondsDefault language
        player.on('playing', function(){
          const currentSecondLanguageDefaults = getSecondCaptionsDefaults()
          l('currentSecondLanguageDefaults', currentSecondLanguageDefaults)
          l(language);
          if(!haveSetupSecondCaptions){
            setTimeout(function () {
              // open menu
              $('.plyr__menu').children().eq(0).click()
              const presetLanguage = currentSecondLanguageDefaults[language];
              if (presetLanguage) {
                // set preset value
                $(`span#languageValue[value="${presetLanguage}"]`).parent().click();
                // close menu
                $('.plyr__menu').children().eq(0).click()
                haveSetupSecondCaptions = true;
              }
            }, 10)
          }
        })

        player.on('cuechange', function (event) {
          const text = event.detail.plyr.captions.currentTrackNode.activeCues[0]?.text;
          const thing = getCurrentLanguageAndTrack()
          l(thing);

          const selectedTranslation = $("#languageName[aria-checked='true'] > span[id*='languageValue']").attr("value");
          if(selectedTranslation && selectedTranslation !== 'Disabled') {
            const translation = findTextFromIndexNumber(selectedTranslation, thing.indexNumber);
            const originalText = $('span.plyr__caption').text();

            $('span.plyr__caption').text(`${originalText}\n${translation || ''}`);
          }

          // balance text not working at the moment
          if(subtitlesFontSize){
            $('.plyr__caption').css('font-size', `${subtitlesFontSize}px`);
          }

          if(subtitlesLineHeight){
            $('.plyr__caption').css('line-height', `${subtitlesLineHeight}px`);
          }
          l(text);
        })
      }, 200)
    });
