script.
  const renderDownloadInfo = ({ data, circleProgress }) => {
    // let's use my algo for calculating the ETA because it's more accurate
    // therefore all we need is percentage
    // we'll calculate, seconds elapsed, seconds remaining

    l('data received from downloadInfo');
    l(data);

    const percentDownloaded = data.percentDownloaded;
    const startedAtTime = data.startedAtTime;
    fileName = data.fileName;
    const totalFileSize = data.totalFileSize;
    const downloadSpeed = data.downloadSpeed;
    const {fileSizeUnit, fileSizeValue} = data;

    const differenceInMs = new Date() - new Date(startedAtTime);

    // get time in seconds between upload start time and now
    const timeElapsedInSeconds = Math.round(differenceInMs / 1000);
    // estimate how many seconds remaining based on percentage
    const estimatedTotalDownloadTimeInSeconds = Math.round(timeElapsedInSeconds * (100 / percentDownloaded));
    // time left is difference of estimated time and elapsed time
    const estSecondsRemaining = estimatedTotalDownloadTimeInSeconds - timeElapsedInSeconds;

    $('#timeEstimator').show();
    $('#progress').show()
    $('#header').html('Downloading..');
    $('#form').hide()
    $('#startNewUpload').show();


    $('#progress').html(`${percentDownloaded}% downloaded`);
    document.title = `${percentDownloaded}% Downloaded - ${fileName}`;

    circleProgress.attr({
      max: 100,
      value: Number(percentDownloaded),
    });

    if (percentDownloaded === 100) {
      circleProgress.attr({
        max: 100,
        value: 0,
      });
      $('.progress').hide();
    } else {
      $('.progress').show();
    }

    const estSecondsIsNan = isNaN(estSecondsRemaining);

    let timeRemainingString = '';
    if(estSecondsRemaining !== Infinity && !estSecondsIsNan) {
      timeRemainingString = `[${timeElapsedInSeconds}/${estSecondsRemaining}s] ${forHumans(estSecondsRemaining)} remaining`
    }

    const totalDownloaded = Number((fileSizeValue * (percentDownloaded / 100)).toFixed(2));
    const totalDownloadedANumber = isNaN(totalDownloaded)

    const frontendDisplayString = `
    ${timeRemainingString}

    Total File Size: ${totalFileSize || ''}
    Download Speed: ${downloadSpeed || ''}
    Total Downloaded: ${ totalDownloaded || ''}${totalDownloaded && fileSizeUnit || ''}

    Filename: ${fileName}
    `

    $('#timeEstimator').html(frontendDisplayString)
  }

  // global vars used for using in the decrementing function
  let globalEstimatedSecondsRemaining, globalTimeElapsedInSeconds, globalUploadedAmountInMB;

  const progressUpload = (evt, startDate, circleProgress, fileName) => {
    l(evt);
    $('#form').hide();
    $('#startNewUpload').show();

    const uploadedAmountInMB = _.round(evt.loaded / (1024 * 1024), 1);
    const totalFileSizeInMB = _.round(evt.total / (1024 * 1024), 1);
    const percentUpload = Math.round((uploadedAmountInMB / totalFileSizeInMB) * 100);
    // get time in seconds between upload start time and now
    const timeElapsedInSeconds = Math.round((new Date() - startDate) / 1000);
    // estimate how many seconds remaining based on percentage
    const estUploadTimeInSeconds = Math.round(timeElapsedInSeconds * (100 / percentUpload));
    // time left is difference of estimated time and elapsed time
    const estSecondsRemaining = estUploadTimeInSeconds - timeElapsedInSeconds;

    l({percentUpload});
    l({timeElapsedInSeconds});
    l({estSecondsRemaining});

    $('#progress').html(`${percentUpload}% uploaded`);
    document.title = `${percentUpload}% Uploaded - ${fileName}`;

    circleProgress.attr({
      max: 100,
      value: Number(percentUpload),
    });

    if (percentUpload === 100) {
      circleProgress.attr({
        max: 100,
        value: 0,
      });
      $('.progress').hide();
    } else {
      $('.progress').show();
    }

    globalEstimatedSecondsRemaining = estSecondsRemaining;
    globalUploadedAmountInMB = uploadedAmountInMB;
    globalTimeElapsedInSeconds = timeElapsedInSeconds;

    // start up functionality to update estimate every second
    if (!uploadStarted) {
      uploadStarted = true;
      setInterval(() => {
        const estSecondsIsInfinity = globalEstimatedSecondsRemaining === Infinity;
        const estSecondsIsNan = isNaN(globalEstimatedSecondsRemaining);
        const uploadSpeedInMBs = _.round((globalUploadedAmountInMB / globalTimeElapsedInSeconds), 1);

        const valueIsValid = !estSecondsIsInfinity && !estSecondsIsNan;
        if (!valueIsValid) return;

        $('#timeEstimator').html(`[${globalTimeElapsedInSeconds}/${globalEstimatedSecondsRemaining}s] ${forHumans(globalEstimatedSecondsRemaining)} remaining
          \n Total File Size: ${totalFileSizeInMB} MB, \nAlready Uploaded: ${globalUploadedAmountInMB} MB \nUpload Speed: ${uploadSpeedInMBs} MB/s,
          `);
      }, 1000)
    }
  }

  const loadAjax = ({ response, circleProgress }) => {
    if(downloadStarted) downloadFinished = true;
    if(transcriptionFailed) return
    l({response});
    $('#processingData').show();
    $('#latestData').show();
    $('#progress').hide();
    $('#timeEstimator').hide();
    $('#header').html('Processing..');
    circleProgress.attr({
      max: 100,
      value: 0,
    });
    $('.progress').show();
  }

  // show queue position on frontend
  const renderQueue = ({place, log}) => {
    inTheQueue = true;
    l(log);
    let queueMessage;
    let titleMessage;
    let movingBackwardsInQueue = false;
    if(placeInQueue && place > placeInQueue) movingBackwardsInQueue = true;
    placeInQueue = place;
    if(place < 1){
      queueMessage = `Starting now...`;
    } else if (place === 1){
      queueMessage = `You're next up`;
    } else if (place === 2) {
      queueMessage = `There's 1 person ahead of you`;
      titleMessage = `1 person ahead of you`;
    } else {
      queueMessage = `There are ${place - 1} people ahead of you`;
      titleMessage = `${place - 1} people ahead of you`;
    }

    if(movingBackwardsInQueue){
      queueMessage = queueMessage + `\n\n Paid users can jump to the front of the line`
    }

    document.title = `${titleMessage || queueMessage}`;
    $('#latestData').html(queueMessage)
  }

  let latestProgress, globalTimeRemaining, myUploadStarted = false;

  // progress from the remote transcription setup
  const handleProgressData = ({data, circleProgress}) => {

    $('#latestData').hide();

    // TODO: have to pass the function here
    const { processingDataString, percentDoneAsNumber, progressData } = data;

    const {
      timeRemaining,
      timeElapsed,
      totalTimeEstimated,
      speed,
      title,
      duration,
      fileType,
      language,
      model
    } = progressData || {};

    const { hoursRemaining, minutesRemaining, secondsRemaining } = timeRemaining || {};

    const realTimeDataAvailable = hoursRemaining || minutesRemaining || secondsRemaining;

    $('#processingData').text(processingDataString);

    if (window.decrementInterval){
      clearInterval(window.decrementInterval);
      delete window.decrementInterval;
    }

    globalTimeRemaining = timeRemaining;

    if(realTimeDataAvailable){
      window.decrementInterval = setInterval(() => {
        globalTimeRemaining = decrementBySecond(globalTimeRemaining);

        const newProcessingString = generateProcessingDataString({
          timeRemaining: globalTimeRemaining.string,
          timeElapsed,
          totalTimeEstimated,
          speed,
          title,
          duration,
          fileType,
          language,
          model
        });

        l('decrementedTime', globalTimeRemaining);

        $('#processingData').text(newProcessingString);
      }, 1000);
    }

    document.title = `${percentDoneAsNumber || 0}% Transcribed - ${fileName}`;

    if(percentDoneAsNumber){
      circleProgress.attr({
        max: 100,
        value: percentDoneAsNumber,
      });
    }

    if(processingDataString === 'Translating..'){
      circleProgress.attr({
        max: 100,
        value: 100,
      });
      $('#processingData').text('Transcription finished, translating..');
    }
  }

  const renderProcessingFeedback = ({data, hitTheBackend}) => {
    l('websocket data');
    let loopStarted;
    //- destructure the data object -osb910
    let {
      ownershipPerson,
      serverNumber: processNumber,
      percentDone,
      timeRemaining,
      processingData,
      formattedProgress
    } = data;
    const myUpload = ownershipPerson === 'you';

    // disregard any data that isn't yours after your processing has started
    if (!myUpload && myUploadStarted) return;

    latestProgress = formattedProgress;

    const fileName = $('#file').prop('files')[0]?.name;
    if (myUpload && percentDone) {
      document.title = `${percentDone}% Transcribed - ${fileName}`;
    }

    // by default let to 'latest processing'
    // TODO: this is misnamed, it's not the upload that's started but the processing
    let processFeedback = `Latest processing data (process ${processNumber})\n`;
    if (myUpload) {
      /** it's your upload **/
      // data is no longer relevant
      $('#secondProcessingData').hide();
      myUploadStarted = true; // force this to true
      processFeedback = ``;
      $('#latestData').hide();
    }

    // TODO: what does this eitherProcess check actually accomplish?
    // every second it grabs it from the ether and decrements it and rebuilds the string
    const eitherProcess = processNumber ===  1 || processNumber === 2;
    l({eitherProcess});

    const myUploadProcessing = myUpload && hitTheBackend && myUploadStarted

    // TODO: need my upload finished? && !myUploadFinished
    l({eitherProcess, myUpload, hitTheBackend, myUploadStarted});
    if (eitherProcess && myUploadProcessing) {
      l('found my data');
      $('#processingData').show();
      // actual process data coming back
      if (percentDone > 0) {
        circleProgress.attr({
          max: 100,
          value: percentDone,
        });

        if (percentDone === 100) {
          $('.progress').hide();
        } else {
          $('.progress').show();
        }

       globalTimeRemaining = timeRemaining;

        if (!window.decrementInterval) {
          // BUG: timer reaches 0 early because it's out of sync with the actual progress, maybe calculate it on the backend? -osb910
          window.decrementInterval = setInterval(() => {
            globalTimeRemaining = decrementBySecond(globalTimeRemaining);
            l({globalTimeRemaining});

            const progressUpdate =
            `[${latestProgress.percentDone}] ${globalTimeRemaining.string} Remaining, Speed ${latestProgress.speed}f/s`;

            $('#processingData').html(`${processFeedback}${progressUpdate}`);
          }, 1000);
        }

      } else {
        $('#processingData').html(`${processFeedback}Transcription starting soon..`);
      }
    }

    if(downloadStarted && !downloadFinished) return

    // TODO: this seems off
    // update the process 2 info if appropriate
    // TODO: this is misnamed, it's not the upload that's started but the processing
    if (!myUpload && !myUploadStarted && hitTheBackend && !myProcessingStarted) {
      l(`getting process ${processNumber} data`);
      // TODO: add decrementing here
      $(`${processNumber === 1 ? '#processingData' : '#secondProcessingData'}`).show();
      $(`${processNumber === 1 ? '#processingData' : '#secondProcessingData'}`).html(`${processFeedback}\n${data.processingData}`);
    }
  }

  const renderStartingFeedback = ({ data, circleProgress }) => {
    inTheQueue = false;
    document.title = `Starting processing..`;
    l('starting data');
    $('#latestData').html(data.text);
    $('#processingData').css({'font-size': '1.6rem'});
    $('#processingData').hide();
    $('#secondProcessingData').hide();
    myProcessingStarted = true;
    circleProgress.attr({
      max: 100,
      value: 100,
    });
    $('.progress').show();
    circleProgress.attr({
      max: 100,
      value: 0,
    });
    // $('#latestData').css("font-size", "20px");
  }

  const renderFileDetails = data => {
    l('file details data');
    const niceDate = new Date().toString().replace(/GMT.*/g, '');
    const niceString = `Started At: ${niceDate}`;
    $('#finishedData').html(data.fileDetails + niceString);
  }

  const renderTranslationUpdate = data => {
    l('language update data');
    // Get a reference to the last interval + 1
    const interval_id = window.setInterval(() => {
    }, Number.MAX_SAFE_INTEGER);

    // Clear any timeout/interval up to that id
    for (let i = 1; i < interval_id; i++) {
      window.clearInterval(i);
    }

    $('#processingData').html(data.languageUpdate);
  }

  const renderCompletionFeedback = ({data, circleProgress}) => {
    l('completed data');
    circleProgress.attr({
      max: 100,
      value: 100,
    });

    if (window.decrementInterval) clearInterval(window.decrementInterval);
    $('#latestData').html(`Congratulations, you're done!`);
    $('#finishedData').html(data.detailsString);
    $('#header').html('Transcription Completed');
    $('#processingData').hide();
    // show refresh button
    $('#refreshButton').hide();
    $('#startNewUpload').hide();
    // redirect to the player page
    // 2 seconds to let the user see the completion message
    setTimeout(() => window.location.href = `/player/${data.filename}`, 2000);
  }

  const renderError = data => {
    l('error data');
    transcriptionFailed = true;
    $('#latestData').hide()
    $('#processingData').show()
    $('#processingData').html(data.text);
  }
